{
  "address": "0x6447F7d21f19af6c11824B06E3a6618542ceDF33",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "UpdateUser",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getmintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmountPerTx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "setUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "userExpires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "userOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x77fbee176dca83e1cba20694de8afa813818675e08e2a2764d1bd1197cd780f6",
  "receipt": {
    "to": null,
    "from": "0x69f2301E037f1E35CC056a736758123460141d7a",
    "contractAddress": "0x6447F7d21f19af6c11824B06E3a6618542ceDF33",
    "transactionIndex": 34,
    "gasUsed": "3652781",
    "logsBloom": "0x
    "blockHash": "0xfe36c1b923269532e7c1a8b1fdc333c6b7a8a381b045052acffaaaec5530d654",
    "transactionHash": "0x77fbee176dca83e1cba20694de8afa813818675e08e2a2764d1bd1197cd780f6",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 8222639,
        "transactionHash": "0x77fbee176dca83e1cba20694de8afa813818675e08e2a2764d1bd1197cd780f6",
        "address": "0x6447F7d21f19af6c11824B06E3a6618542ceDF33",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069f2301e037f1e35cc056a736758123460141d7a"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0xfe36c1b923269532e7c1a8b1fdc333c6b7a8a381b045052acffaaaec5530d654"
      }
    ],
    "blockNumber": 8222639,
    "cumulativeGasUsed": "6616700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11e5d690a6cc71b2c5ba069432d29dac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"UpdateUser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getmintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setUser(uint256,address,uint64)\":{\"details\":\"The zero address indicates there is no user Throws if `tokenId` is not valid NFT\",\"params\":{\"expires\":\"UNIX timestamp, The new user could use the NFT before expires\",\"user\":\"The new user of the NFT\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userExpires(uint256)\":{\"details\":\"The zero value indicates that there is no user\",\"params\":{\"tokenId\":\"The NFT to get the user expires for\"},\"returns\":{\"_0\":\"The user expires for this NFT\"}},\"userOf(uint256)\":{\"details\":\"The zero address indicates that there is no user or the user is expired\",\"params\":{\"tokenId\":\"The NFT to get the user address for\"},\"returns\":{\"_0\":\"The user address for this NFT\"}}},\"version\":1},\"userdoc\":{\"events\":{\"UpdateUser(uint256,address,uint64)\":{\"notice\":\"Emitted when the `user` of an NFT or the `expires` of the `user` is changed The zero address for user indicates that there is no user address\"}},\"kind\":\"user\",\"methods\":{\"setUser(uint256,address,uint64)\":{\"notice\":\"set the user and expires of a NFT\"},\"userExpires(uint256)\":{\"notice\":\"Get the user expires of an NFT\"},\"userOf(uint256)\":{\"notice\":\"Get the user address of an NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC4907/3Landers.sol\":\"Landers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC4907/3Landers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"../utils/EIP4097/ERC4907.sol\\\";\\n\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\ncontract Landers is ERC4907, Ownable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private supply;\\n\\n    string public uriPrefix =\\n        \\\"https://3land.mypinata.cloud/ipfs/QmYZzQ4xkH2Js6bbp3xEFwUURxxLdDG5HkXr3tA8GAdbG2/\\\";\\n    string public uriSuffix = \\\".json\\\";\\n\\n    uint256 public mintCost = 0.01 ether;\\n    uint256 public maxSupply = 10000;\\n    uint256 public maxMintAmountPerTx = 2;\\n    uint256 mintLimit = 2;\\n    mapping(address => uint256) public mintCount;\\n\\n    constructor() ERC4907(\\\"3Landers\\\", \\\"3L\\\") {}\\n\\n    modifier mintRequire(uint256 _mintAmount) {\\n        require(\\n            _mintAmount > 0 && _mintAmount <= maxMintAmountPerTx,\\n            \\\"Invalid mint amount!\\\"\\n        );\\n        require(\\n            supply.current() + _mintAmount <= maxSupply,\\n            \\\"Max supply exceeded!\\\"\\n        );\\n        _;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return supply.current();\\n    }\\n\\n    function mint(uint256 _mintAmount) public payable mintRequire(_mintAmount) {\\n        require(msg.value >= mintCost * _mintAmount, \\\"Insufficient funds!\\\");\\n        require(\\n            mintCount[msg.sender] + _mintAmount <= mintLimit,\\n            \\\"public mint limit exceeded\\\"\\n        );\\n\\n        _mintLoop(msg.sender, _mintAmount);\\n        mintCount[msg.sender] += _mintAmount;\\n    }\\n\\n    function getmintCount() public view returns (uint256) {\\n        return mintCount[msg.sender];\\n    }\\n\\n    function walletOfOwner(\\n        address _owner\\n    ) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\n        uint256 currentTokenId = 1;\\n        uint256 ownedTokenIndex = 0;\\n\\n        while (\\n            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply\\n        ) {\\n            address currentTokenOwner = ownerOf(currentTokenId);\\n\\n            if (currentTokenOwner == _owner) {\\n                ownedTokenIds[ownedTokenIndex] = currentTokenId;\\n                ownedTokenIndex++;\\n            }\\n\\n            currentTokenId++;\\n        }\\n\\n        return ownedTokenIds;\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override returns (string memory) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n        string memory currentBaseURI = _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        currentBaseURI,\\n                        _tokenId.toString(),\\n                        uriSuffix\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(os);\\n    }\\n\\n    function _mintLoop(address _receiver, uint256 _mintAmount) internal {\\n        for (uint256 i = 0; i < _mintAmount; i++) {\\n            supply.increment();\\n            _safeMint(_receiver, supply.current());\\n        }\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return uriPrefix;\\n    }\\n}\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\n\",\"keccak256\":\"0xa0436acdc91bd0a747b6dcacacb1e47babccc5fee39de7dea28fc0976b193609\",\"license\":\"MIT\"},\"contracts/utils/EIP4097/ERC4907.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./IERC4907.sol\\\";\\n\\ncontract ERC4907 is ERC721, IERC4907 {\\n    struct UserInfo {\\n        address user; // address of user role\\n        uint64 expires; // unix timestamp, user expires\\n    }\\n\\n    mapping(uint256 => UserInfo) internal _users;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC721(name_, symbol_) {}\\n\\n    /// @notice set the user and expires of a NFT\\n    /// @dev The zero address indicates there is no user\\n    /// Throws if `tokenId` is not valid NFT\\n    /// @param user  The new user of the NFT\\n    /// @param expires  UNIX timestamp, The new user could use the NFT before expires\\n    function setUser(\\n        uint256 tokenId,\\n        address user,\\n        uint64 expires\\n    ) public virtual {\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        UserInfo storage info = _users[tokenId];\\n        info.user = user;\\n        info.expires = expires;\\n        emit UpdateUser(tokenId, user, expires);\\n    }\\n\\n    /// @notice Get the user address of an NFT\\n    /// @dev The zero address indicates that there is no user or the user is expired\\n    /// @param tokenId The NFT to get the user address for\\n    /// @return The user address for this NFT\\n    function userOf(uint256 tokenId) public view virtual returns (address) {\\n        if (uint256(_users[tokenId].expires) >= block.timestamp) {\\n            return _users[tokenId].user;\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Get the user expires of an NFT\\n    /// @dev The zero value indicates that there is no user\\n    /// @param tokenId The NFT to get the user expires for\\n    /// @return The user expires for this NFT\\n    function userExpires(\\n        uint256 tokenId\\n    ) public view virtual returns (uint256) {\\n        return _users[tokenId].expires;\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC4907).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from != to && _users[tokenId].user != address(0)) {\\n            delete _users[tokenId];\\n            emit UpdateUser(tokenId, address(0), 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c3e03333047103615d4cccfa0b32e4b89150973cfe7f3e5c47a0d325aa5ebd\",\"license\":\"CC0-1.0\"},\"contracts/utils/EIP4097/IERC4907.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\ninterface IERC4907 {\\n    // Logged when the user of an NFT is changed or expires is changed\\n    /// @notice Emitted when the `user` of an NFT or the `expires` of the `user` is changed\\n    /// The zero address for user indicates that there is no user address\\n    event UpdateUser(\\n        uint256 indexed tokenId,\\n        address indexed user,\\n        uint64 expires\\n    );\\n\\n    /// @notice set the user and expires of an NFT\\n    /// @dev The zero address indicates there is no user\\n    /// Throws if `tokenId` is not valid NFT\\n    /// @param user  The new user of the NFT\\n    /// @param expires  UNIX timestamp, The new user could use the NFT before expires\\n    function setUser(uint256 tokenId, address user, uint64 expires) external;\\n\\n    /// @notice Get the user address of an NFT\\n    /// @dev The zero address indicates that there is no user or the user is expired\\n    /// @param tokenId The NFT to get the user address for\\n    /// @return The user address for this NFT\\n    function userOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Get the user expires of an NFT\\n    /// @dev The zero value indicates that there is no user\\n    /// @param tokenId The NFT to get the user expires for\\n    /// @return The user expires for this NFT\\n    function userExpires(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14cac029af3078a50d441cf7bcccd9a8ed8049a36c8d5621b719a335095e1cd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180608001604052806051815260200162003fb260519139600990805190602001906200003592919062000245565b506040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600a90805190602001906200008392919062000245565b50662386f26fc10000600b55612710600c556002600d556002600e55348015620000ac57600080fd5b506040518060400160405280600881526020017f334c616e646572730000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f334c000000000000000000000000000000000000000000000000000000000000815250818181600090805190602001906200013392919062000245565b5080600190805190602001906200014c92919062000245565b505050505062000171620001656200017760201b60201c565b6200017f60201b60201c565b62000359565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002539062000324565b90600052602060002090601f016020900481019282620002775760008555620002c3565b82601f106200029257805160ff1916838001178555620002c3565b82800160010185558215620002c3579182015b82811115620002c2578251825591602001919060010190620002a5565b5b509050620002d29190620002d6565b5090565b5b80821115620002f1576000816000905550600101620002d7565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b613c4980620003696000396000f3fe6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063bdb4b84811610095578063e030565e11610064578063e030565e1461067f578063e985e9c5146106a8578063ed9ec888146106e5578063f2fde38b14610722576101cd565b8063bdb4b848146105af578063c2f1f14a146105da578063c87b56dd14610617578063d5abeb0114610654576101cd565b806395d89b41116100d157806395d89b4114610516578063a0712d6814610541578063a22cb4651461055d578063b88d4fde14610586576101cd565b80638da5cb5b146104835780638fc88c48146104ae57806394354fd0146104eb576101cd565b806342842e0e1161016f57806362b99ad41161013e57806362b99ad4146103c75780636352211e146103f257806370a082311461042f578063715018a61461046c576101cd565b806342842e0e1461030b578063438b6300146103345780635503a0e8146103715780635619f4431461039c576101cd565b8063095ea7b3116101ab578063095ea7b31461027757806318160ddd146102a057806323b872dd146102cb5780633ccfd60b146102f4576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f4919061269a565b61074b565b60405161020691906126e2565b60405180910390f35b34801561021b57600080fd5b506102246107c5565b6040516102319190612796565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c91906127ee565b610857565b60405161026e919061285c565b60405180910390f35b34801561028357600080fd5b5061029e600480360381019061029991906128a3565b61089d565b005b3480156102ac57600080fd5b506102b56109b4565b6040516102c291906128f2565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061290d565b6109c5565b005b34801561030057600080fd5b50610309610a25565b005b34801561031757600080fd5b50610332600480360381019061032d919061290d565b610aad565b005b34801561034057600080fd5b5061035b60048036038101906103569190612960565b610acd565b6040516103689190612a4b565b60405180910390f35b34801561037d57600080fd5b50610386610bd7565b6040516103939190612796565b60405180910390f35b3480156103a857600080fd5b506103b1610c65565b6040516103be91906128f2565b60405180910390f35b3480156103d357600080fd5b506103dc610cac565b6040516103e99190612796565b60405180910390f35b3480156103fe57600080fd5b50610419600480360381019061041491906127ee565b610d3a565b604051610426919061285c565b60405180910390f35b34801561043b57600080fd5b5061045660048036038101906104519190612960565b610deb565b60405161046391906128f2565b60405180910390f35b34801561047857600080fd5b50610481610ea2565b005b34801561048f57600080fd5b50610498610eb6565b6040516104a5919061285c565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d091906127ee565b610ee0565b6040516104e291906128f2565b60405180910390f35b3480156104f757600080fd5b50610500610f1e565b60405161050d91906128f2565b60405180910390f35b34801561052257600080fd5b5061052b610f24565b6040516105389190612796565b60405180910390f35b61055b600480360381019061055691906127ee565b610fb6565b005b34801561056957600080fd5b50610584600480360381019061057f9190612a99565b6111a4565b005b34801561059257600080fd5b506105ad60048036038101906105a89190612c0e565b6111ba565b005b3480156105bb57600080fd5b506105c461121c565b6040516105d191906128f2565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc91906127ee565b611222565b60405161060e919061285c565b60405180910390f35b34801561062357600080fd5b5061063e600480360381019061063991906127ee565b6112a7565b60405161064b9190612796565b60405180910390f35b34801561066057600080fd5b50610669611351565b60405161067691906128f2565b60405180910390f35b34801561068b57600080fd5b506106a660048036038101906106a19190612cd1565b611357565b005b3480156106b457600080fd5b506106cf60048036038101906106ca9190612d24565b61147a565b6040516106dc91906126e2565b60405180910390f35b3480156106f157600080fd5b5061070c60048036038101906107079190612960565b61150e565b60405161071991906128f2565b60405180910390f35b34801561072e57600080fd5b5061074960048036038101906107449190612960565b611526565b005b60007fad092b5c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107be57506107bd826115a9565b5b9050919050565b6060600080546107d490612d93565b80601f016020809104026020016040519081016040528092919081815260200182805461080090612d93565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050905090565b60006108628261168b565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108a882610d3a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90612e36565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109376116d6565b73ffffffffffffffffffffffffffffffffffffffff1614806109665750610965816109606116d6565b61147a565b5b6109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90612ec8565b60405180910390fd5b6109af83836116de565b505050565b60006109c06008611797565b905090565b6109d66109d06116d6565b826117a5565b610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90612f5a565b60405180910390fd5b610a2083838361183a565b505050565b610a2d611aa0565b6000610a37610eb6565b73ffffffffffffffffffffffffffffffffffffffff1647604051610a5a90612fab565b60006040518083038185875af1925050503d8060008114610a97576040519150601f19603f3d011682016040523d82523d6000602084013e610a9c565b606091505b5050905080610aaa57600080fd5b50565b610ac8838383604051806020016040528060008152506111ba565b505050565b60606000610ada83610deb565b905060008167ffffffffffffffff811115610af857610af7612ae3565b5b604051908082528060200260200182016040528015610b265781602001602082028036833780820191505090505b50905060006001905060005b8381108015610b435750600c548211155b15610bcb576000610b5383610d3a565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bb75782848381518110610b9c57610b9b612fc0565b5b6020026020010181815250508180610bb39061301e565b9250505b8280610bc29061301e565b93505050610b32565b82945050505050919050565b600a8054610be490612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1090612d93565b8015610c5d5780601f10610c3257610100808354040283529160200191610c5d565b820191906000526020600020905b815481529060010190602001808311610c4057829003601f168201915b505050505081565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60098054610cb990612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce590612d93565b8015610d325780601f10610d0757610100808354040283529160200191610d32565b820191906000526020600020905b815481529060010190602001808311610d1557829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906130b2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290613144565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eaa611aa0565b610eb46000611b1e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006006600083815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b600d5481565b606060018054610f3390612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5f90612d93565b8015610fac5780601f10610f8157610100808354040283529160200191610fac565b820191906000526020600020905b815481529060010190602001808311610f8f57829003601f168201915b5050505050905090565b80600081118015610fc95750600d548111155b611008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fff906131b0565b60405180910390fd5b600c54816110166008611797565b61102091906131d0565b1115611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890613272565b60405180910390fd5b81600b5461106f9190613292565b3410156110b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a890613338565b60405180910390fd5b600e5482600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ff91906131d0565b1115611140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611137906133a4565b60405180910390fd5b61114a3383611be4565b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461119991906131d0565b925050819055505050565b6111b66111af6116d6565b8383611c24565b5050565b6111cb6111c56116d6565b836117a5565b61120a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120190612f5a565b60405180910390fd5b61121684848484611d90565b50505050565b600b5481565b6000426006600084815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff161061129d576006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506112a2565b600090505b919050565b60606112b282611dec565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890613436565b60405180910390fd5b60006112fb611e58565b9050600081511161131b5760405180602001604052806000815250611349565b8061132584611eea565b600a60405160200161133993929190613526565b6040516020818303038152906040525b915050919050565b600c5481565b61136133846117a5565b6113a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611397906135c9565b60405180910390fd5b6000600660008581526020019081526020016000209050828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16847f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe8460405161146c91906135f8565b60405180910390a350505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600f6020528060005260406000206000915090505481565b61152e611aa0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490613685565b60405180910390fd5b6115a681611b1e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061167457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061168457506116838261204a565b5b9050919050565b61169481611dec565b6116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ca906130b2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661175183610d3a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000806117b183610d3a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117f357506117f2818561147a565b5b8061183157508373ffffffffffffffffffffffffffffffffffffffff1661181984610857565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661185a82610d3a565b73ffffffffffffffffffffffffffffffffffffffff16146118b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a790613717565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361191f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611916906137a9565b60405180910390fd5b61192a8383836120b4565b6119356000826116de565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461198591906137c9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119dc91906131d0565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a9b838383612212565b505050565b611aa86116d6565b73ffffffffffffffffffffffffffffffffffffffff16611ac6610eb6565b73ffffffffffffffffffffffffffffffffffffffff1614611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390613849565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005b81811015611c1f57611bf96008612217565b611c0c83611c076008611797565b61222d565b8080611c179061301e565b915050611be7565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c89906138b5565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d8391906126e2565b60405180910390a3505050565b611d9b84848461183a565b611da78484848461224b565b611de6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddd90613947565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060098054611e6790612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9390612d93565b8015611ee05780601f10611eb557610100808354040283529160200191611ee0565b820191906000526020600020905b815481529060010190602001808311611ec357829003601f168201915b5050505050905090565b606060008203611f31576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612045565b600082905060005b60008214611f63578080611f4c9061301e565b915050600a82611f5c9190613996565b9150611f39565b60008167ffffffffffffffff811115611f7f57611f7e612ae3565b5b6040519080825280601f01601f191660200182016040528015611fb15781602001600182028036833780820191505090505b5090505b6000851461203e57600182611fca91906137c9565b9150600a85611fd991906139c7565b6030611fe591906131d0565b60f81b818381518110611ffb57611ffa612fc0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120379190613996565b9450611fb5565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6120bf8383836123d2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561215e5750600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561220d5760066000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690555050600073ffffffffffffffffffffffffffffffffffffffff16817f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe60006040516122049190613a3d565b60405180910390a35b505050565b505050565b6001816000016000828254019250508190555050565b6122478282604051806020016040528060008152506123d7565b5050565b600061226c8473ffffffffffffffffffffffffffffffffffffffff16612432565b156123c5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122956116d6565b8786866040518563ffffffff1660e01b81526004016122b79493929190613aad565b6020604051808303816000875af19250505080156122f357506040513d601f19601f820116820180604052508101906122f09190613b0e565b60015b612375573d8060008114612323576040519150601f19603f3d011682016040523d82523d6000602084013e612328565b606091505b50600081510361236d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236490613947565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506123ca565b600190505b949350505050565b505050565b6123e18383612455565b6123ee600084848461224b565b61242d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242490613947565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036124c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bb90613b87565b60405180910390fd5b6124cd81611dec565b1561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613bf3565b60405180910390fd5b612519600083836120b4565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461256991906131d0565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461262a60008383612212565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61267781612642565b811461268257600080fd5b50565b6000813590506126948161266e565b92915050565b6000602082840312156126b0576126af612638565b5b60006126be84828501612685565b91505092915050565b60008115159050919050565b6126dc816126c7565b82525050565b60006020820190506126f760008301846126d3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561273757808201518184015260208101905061271c565b83811115612746576000848401525b50505050565b6000601f19601f8301169050919050565b6000612768826126fd565b6127728185612708565b9350612782818560208601612719565b61278b8161274c565b840191505092915050565b600060208201905081810360008301526127b0818461275d565b905092915050565b6000819050919050565b6127cb816127b8565b81146127d657600080fd5b50565b6000813590506127e8816127c2565b92915050565b60006020828403121561280457612803612638565b5b6000612812848285016127d9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128468261281b565b9050919050565b6128568161283b565b82525050565b6000602082019050612871600083018461284d565b92915050565b6128808161283b565b811461288b57600080fd5b50565b60008135905061289d81612877565b92915050565b600080604083850312156128ba576128b9612638565b5b60006128c88582860161288e565b92505060206128d9858286016127d9565b9150509250929050565b6128ec816127b8565b82525050565b600060208201905061290760008301846128e3565b92915050565b60008060006060848603121561292657612925612638565b5b60006129348682870161288e565b93505060206129458682870161288e565b9250506040612956868287016127d9565b9150509250925092565b60006020828403121561297657612975612638565b5b60006129848482850161288e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129c2816127b8565b82525050565b60006129d483836129b9565b60208301905092915050565b6000602082019050919050565b60006129f88261298d565b612a028185612998565b9350612a0d836129a9565b8060005b83811015612a3e578151612a2588826129c8565b9750612a30836129e0565b925050600181019050612a11565b5085935050505092915050565b60006020820190508181036000830152612a6581846129ed565b905092915050565b612a76816126c7565b8114612a8157600080fd5b50565b600081359050612a9381612a6d565b92915050565b60008060408385031215612ab057612aaf612638565b5b6000612abe8582860161288e565b9250506020612acf85828601612a84565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b1b8261274c565b810181811067ffffffffffffffff82111715612b3a57612b39612ae3565b5b80604052505050565b6000612b4d61262e565b9050612b598282612b12565b919050565b600067ffffffffffffffff821115612b7957612b78612ae3565b5b612b828261274c565b9050602081019050919050565b82818337600083830152505050565b6000612bb1612bac84612b5e565b612b43565b905082815260208101848484011115612bcd57612bcc612ade565b5b612bd8848285612b8f565b509392505050565b600082601f830112612bf557612bf4612ad9565b5b8135612c05848260208601612b9e565b91505092915050565b60008060008060808587031215612c2857612c27612638565b5b6000612c368782880161288e565b9450506020612c478782880161288e565b9350506040612c58878288016127d9565b925050606085013567ffffffffffffffff811115612c7957612c7861263d565b5b612c8587828801612be0565b91505092959194509250565b600067ffffffffffffffff82169050919050565b612cae81612c91565b8114612cb957600080fd5b50565b600081359050612ccb81612ca5565b92915050565b600080600060608486031215612cea57612ce9612638565b5b6000612cf8868287016127d9565b9350506020612d098682870161288e565b9250506040612d1a86828701612cbc565b9150509250925092565b60008060408385031215612d3b57612d3a612638565b5b6000612d498582860161288e565b9250506020612d5a8582860161288e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612dab57607f821691505b602082108103612dbe57612dbd612d64565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e20602183612708565b9150612e2b82612dc4565b604082019050919050565b60006020820190508181036000830152612e4f81612e13565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612eb2603e83612708565b9150612ebd82612e56565b604082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612f44602e83612708565b9150612f4f82612ee8565b604082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b600081905092915050565b50565b6000612f95600083612f7a565b9150612fa082612f85565b600082019050919050565b6000612fb682612f88565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613029826127b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305b5761305a612fef565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061309c601883612708565b91506130a782613066565b602082019050919050565b600060208201905081810360008301526130cb8161308f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061312e602983612708565b9150613139826130d2565b604082019050919050565b6000602082019050818103600083015261315d81613121565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b600061319a601483612708565b91506131a582613164565b602082019050919050565b600060208201905081810360008301526131c98161318d565b9050919050565b60006131db826127b8565b91506131e6836127b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561321b5761321a612fef565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b600061325c601483612708565b915061326782613226565b602082019050919050565b6000602082019050818103600083015261328b8161324f565b9050919050565b600061329d826127b8565b91506132a8836127b8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132e1576132e0612fef565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b6000613322601383612708565b915061332d826132ec565b602082019050919050565b6000602082019050818103600083015261335181613315565b9050919050565b7f7075626c6963206d696e74206c696d6974206578636565646564000000000000600082015250565b600061338e601a83612708565b915061339982613358565b602082019050919050565b600060208201905081810360008301526133bd81613381565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613420602f83612708565b915061342b826133c4565b604082019050919050565b6000602082019050818103600083015261344f81613413565b9050919050565b600081905092915050565b600061346c826126fd565b6134768185613456565b9350613486818560208601612719565b80840191505092915050565b60008190508160005260206000209050919050565b600081546134b481612d93565b6134be8186613456565b945060018216600081146134d957600181146134ea5761351d565b60ff1983168652818601935061351d565b6134f385613492565b60005b83811015613515578154818901526001820191506020810190506134f6565b838801955050505b50505092915050565b60006135328286613461565b915061353e8285613461565b915061354a82846134a7565b9150819050949350505050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006135b3603183612708565b91506135be82613557565b604082019050919050565b600060208201905081810360008301526135e2816135a6565b9050919050565b6135f281612c91565b82525050565b600060208201905061360d60008301846135e9565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061366f602683612708565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613701602583612708565b915061370c826136a5565b604082019050919050565b60006020820190508181036000830152613730816136f4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613793602483612708565b915061379e82613737565b604082019050919050565b600060208201905081810360008301526137c281613786565b9050919050565b60006137d4826127b8565b91506137df836127b8565b9250828210156137f2576137f1612fef565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613833602083612708565b915061383e826137fd565b602082019050919050565b6000602082019050818103600083015261386281613826565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061389f601983612708565b91506138aa82613869565b602082019050919050565b600060208201905081810360008301526138ce81613892565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613931603283612708565b915061393c826138d5565b604082019050919050565b6000602082019050818103600083015261396081613924565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139a1826127b8565b91506139ac836127b8565b9250826139bc576139bb613967565b5b828204905092915050565b60006139d2826127b8565b91506139dd836127b8565b9250826139ed576139ec613967565b5b828206905092915050565b6000819050919050565b6000819050919050565b6000613a27613a22613a1d846139f8565b613a02565b612c91565b9050919050565b613a3781613a0c565b82525050565b6000602082019050613a526000830184613a2e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000613a7f82613a58565b613a898185613a63565b9350613a99818560208601612719565b613aa28161274c565b840191505092915050565b6000608082019050613ac2600083018761284d565b613acf602083018661284d565b613adc60408301856128e3565b8181036060830152613aee8184613a74565b905095945050505050565b600081519050613b088161266e565b92915050565b600060208284031215613b2457613b23612638565b5b6000613b3284828501613af9565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613b71602083612708565b9150613b7c82613b3b565b602082019050919050565b60006020820190508181036000830152613ba081613b64565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613bdd601c83612708565b9150613be882613ba7565b602082019050919050565b60006020820190508181036000830152613c0c81613bd0565b905091905056fea2646970667358221220632251cdb570266279344a41ba92ef4caec22c1999a8919bf035f54e61f1e88e64736f6c634300080e003368747470733a2f2f336c616e642e6d7970696e6174612e636c6f75642f697066732f516d595a7a5134786b48324a7336626270337845467755555278784c64444735486b5872337441384741646247322f",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063bdb4b84811610095578063e030565e11610064578063e030565e1461067f578063e985e9c5146106a8578063ed9ec888146106e5578063f2fde38b14610722576101cd565b8063bdb4b848146105af578063c2f1f14a146105da578063c87b56dd14610617578063d5abeb0114610654576101cd565b806395d89b41116100d157806395d89b4114610516578063a0712d6814610541578063a22cb4651461055d578063b88d4fde14610586576101cd565b80638da5cb5b146104835780638fc88c48146104ae57806394354fd0146104eb576101cd565b806342842e0e1161016f57806362b99ad41161013e57806362b99ad4146103c75780636352211e146103f257806370a082311461042f578063715018a61461046c576101cd565b806342842e0e1461030b578063438b6300146103345780635503a0e8146103715780635619f4431461039c576101cd565b8063095ea7b3116101ab578063095ea7b31461027757806318160ddd146102a057806323b872dd146102cb5780633ccfd60b146102f4576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f4919061269a565b61074b565b60405161020691906126e2565b60405180910390f35b34801561021b57600080fd5b506102246107c5565b6040516102319190612796565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c91906127ee565b610857565b60405161026e919061285c565b60405180910390f35b34801561028357600080fd5b5061029e600480360381019061029991906128a3565b61089d565b005b3480156102ac57600080fd5b506102b56109b4565b6040516102c291906128f2565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed919061290d565b6109c5565b005b34801561030057600080fd5b50610309610a25565b005b34801561031757600080fd5b50610332600480360381019061032d919061290d565b610aad565b005b34801561034057600080fd5b5061035b60048036038101906103569190612960565b610acd565b6040516103689190612a4b565b60405180910390f35b34801561037d57600080fd5b50610386610bd7565b6040516103939190612796565b60405180910390f35b3480156103a857600080fd5b506103b1610c65565b6040516103be91906128f2565b60405180910390f35b3480156103d357600080fd5b506103dc610cac565b6040516103e99190612796565b60405180910390f35b3480156103fe57600080fd5b50610419600480360381019061041491906127ee565b610d3a565b604051610426919061285c565b60405180910390f35b34801561043b57600080fd5b5061045660048036038101906104519190612960565b610deb565b60405161046391906128f2565b60405180910390f35b34801561047857600080fd5b50610481610ea2565b005b34801561048f57600080fd5b50610498610eb6565b6040516104a5919061285c565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d091906127ee565b610ee0565b6040516104e291906128f2565b60405180910390f35b3480156104f757600080fd5b50610500610f1e565b60405161050d91906128f2565b60405180910390f35b34801561052257600080fd5b5061052b610f24565b6040516105389190612796565b60405180910390f35b61055b600480360381019061055691906127ee565b610fb6565b005b34801561056957600080fd5b50610584600480360381019061057f9190612a99565b6111a4565b005b34801561059257600080fd5b506105ad60048036038101906105a89190612c0e565b6111ba565b005b3480156105bb57600080fd5b506105c461121c565b6040516105d191906128f2565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc91906127ee565b611222565b60405161060e919061285c565b60405180910390f35b34801561062357600080fd5b5061063e600480360381019061063991906127ee565b6112a7565b60405161064b9190612796565b60405180910390f35b34801561066057600080fd5b50610669611351565b60405161067691906128f2565b60405180910390f35b34801561068b57600080fd5b506106a660048036038101906106a19190612cd1565b611357565b005b3480156106b457600080fd5b506106cf60048036038101906106ca9190612d24565b61147a565b6040516106dc91906126e2565b60405180910390f35b3480156106f157600080fd5b5061070c60048036038101906107079190612960565b61150e565b60405161071991906128f2565b60405180910390f35b34801561072e57600080fd5b5061074960048036038101906107449190612960565b611526565b005b60007fad092b5c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107be57506107bd826115a9565b5b9050919050565b6060600080546107d490612d93565b80601f016020809104026020016040519081016040528092919081815260200182805461080090612d93565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050905090565b60006108628261168b565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108a882610d3a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90612e36565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109376116d6565b73ffffffffffffffffffffffffffffffffffffffff1614806109665750610965816109606116d6565b61147a565b5b6109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90612ec8565b60405180910390fd5b6109af83836116de565b505050565b60006109c06008611797565b905090565b6109d66109d06116d6565b826117a5565b610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90612f5a565b60405180910390fd5b610a2083838361183a565b505050565b610a2d611aa0565b6000610a37610eb6565b73ffffffffffffffffffffffffffffffffffffffff1647604051610a5a90612fab565b60006040518083038185875af1925050503d8060008114610a97576040519150601f19603f3d011682016040523d82523d6000602084013e610a9c565b606091505b5050905080610aaa57600080fd5b50565b610ac8838383604051806020016040528060008152506111ba565b505050565b60606000610ada83610deb565b905060008167ffffffffffffffff811115610af857610af7612ae3565b5b604051908082528060200260200182016040528015610b265781602001602082028036833780820191505090505b50905060006001905060005b8381108015610b435750600c548211155b15610bcb576000610b5383610d3a565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bb75782848381518110610b9c57610b9b612fc0565b5b6020026020010181815250508180610bb39061301e565b9250505b8280610bc29061301e565b93505050610b32565b82945050505050919050565b600a8054610be490612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1090612d93565b8015610c5d5780601f10610c3257610100808354040283529160200191610c5d565b820191906000526020600020905b815481529060010190602001808311610c4057829003601f168201915b505050505081565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60098054610cb990612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce590612d93565b8015610d325780601f10610d0757610100808354040283529160200191610d32565b820191906000526020600020905b815481529060010190602001808311610d1557829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906130b2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290613144565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eaa611aa0565b610eb46000611b1e565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006006600083815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b600d5481565b606060018054610f3390612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5f90612d93565b8015610fac5780601f10610f8157610100808354040283529160200191610fac565b820191906000526020600020905b815481529060010190602001808311610f8f57829003601f168201915b5050505050905090565b80600081118015610fc95750600d548111155b611008576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fff906131b0565b60405180910390fd5b600c54816110166008611797565b61102091906131d0565b1115611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890613272565b60405180910390fd5b81600b5461106f9190613292565b3410156110b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a890613338565b60405180910390fd5b600e5482600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ff91906131d0565b1115611140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611137906133a4565b60405180910390fd5b61114a3383611be4565b81600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461119991906131d0565b925050819055505050565b6111b66111af6116d6565b8383611c24565b5050565b6111cb6111c56116d6565b836117a5565b61120a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120190612f5a565b60405180910390fd5b61121684848484611d90565b50505050565b600b5481565b6000426006600084815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff161061129d576006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506112a2565b600090505b919050565b60606112b282611dec565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890613436565b60405180910390fd5b60006112fb611e58565b9050600081511161131b5760405180602001604052806000815250611349565b8061132584611eea565b600a60405160200161133993929190613526565b6040516020818303038152906040525b915050919050565b600c5481565b61136133846117a5565b6113a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611397906135c9565b60405180910390fd5b6000600660008581526020019081526020016000209050828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16847f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe8460405161146c91906135f8565b60405180910390a350505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600f6020528060005260406000206000915090505481565b61152e611aa0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490613685565b60405180910390fd5b6115a681611b1e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061167457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061168457506116838261204a565b5b9050919050565b61169481611dec565b6116d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ca906130b2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661175183610d3a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000806117b183610d3a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117f357506117f2818561147a565b5b8061183157508373ffffffffffffffffffffffffffffffffffffffff1661181984610857565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661185a82610d3a565b73ffffffffffffffffffffffffffffffffffffffff16146118b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a790613717565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361191f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611916906137a9565b60405180910390fd5b61192a8383836120b4565b6119356000826116de565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461198591906137c9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119dc91906131d0565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a9b838383612212565b505050565b611aa86116d6565b73ffffffffffffffffffffffffffffffffffffffff16611ac6610eb6565b73ffffffffffffffffffffffffffffffffffffffff1614611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390613849565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005b81811015611c1f57611bf96008612217565b611c0c83611c076008611797565b61222d565b8080611c179061301e565b915050611be7565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c89906138b5565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d8391906126e2565b60405180910390a3505050565b611d9b84848461183a565b611da78484848461224b565b611de6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddd90613947565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060098054611e6790612d93565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9390612d93565b8015611ee05780601f10611eb557610100808354040283529160200191611ee0565b820191906000526020600020905b815481529060010190602001808311611ec357829003601f168201915b5050505050905090565b606060008203611f31576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612045565b600082905060005b60008214611f63578080611f4c9061301e565b915050600a82611f5c9190613996565b9150611f39565b60008167ffffffffffffffff811115611f7f57611f7e612ae3565b5b6040519080825280601f01601f191660200182016040528015611fb15781602001600182028036833780820191505090505b5090505b6000851461203e57600182611fca91906137c9565b9150600a85611fd991906139c7565b6030611fe591906131d0565b60f81b818381518110611ffb57611ffa612fc0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120379190613996565b9450611fb5565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6120bf8383836123d2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561215e5750600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561220d5760066000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690555050600073ffffffffffffffffffffffffffffffffffffffff16817f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe60006040516122049190613a3d565b60405180910390a35b505050565b505050565b6001816000016000828254019250508190555050565b6122478282604051806020016040528060008152506123d7565b5050565b600061226c8473ffffffffffffffffffffffffffffffffffffffff16612432565b156123c5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122956116d6565b8786866040518563ffffffff1660e01b81526004016122b79493929190613aad565b6020604051808303816000875af19250505080156122f357506040513d601f19601f820116820180604052508101906122f09190613b0e565b60015b612375573d8060008114612323576040519150601f19603f3d011682016040523d82523d6000602084013e612328565b606091505b50600081510361236d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236490613947565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506123ca565b600190505b949350505050565b505050565b6123e18383612455565b6123ee600084848461224b565b61242d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242490613947565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036124c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bb90613b87565b60405180910390fd5b6124cd81611dec565b1561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613bf3565b60405180910390fd5b612519600083836120b4565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461256991906131d0565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461262a60008383612212565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61267781612642565b811461268257600080fd5b50565b6000813590506126948161266e565b92915050565b6000602082840312156126b0576126af612638565b5b60006126be84828501612685565b91505092915050565b60008115159050919050565b6126dc816126c7565b82525050565b60006020820190506126f760008301846126d3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561273757808201518184015260208101905061271c565b83811115612746576000848401525b50505050565b6000601f19601f8301169050919050565b6000612768826126fd565b6127728185612708565b9350612782818560208601612719565b61278b8161274c565b840191505092915050565b600060208201905081810360008301526127b0818461275d565b905092915050565b6000819050919050565b6127cb816127b8565b81146127d657600080fd5b50565b6000813590506127e8816127c2565b92915050565b60006020828403121561280457612803612638565b5b6000612812848285016127d9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128468261281b565b9050919050565b6128568161283b565b82525050565b6000602082019050612871600083018461284d565b92915050565b6128808161283b565b811461288b57600080fd5b50565b60008135905061289d81612877565b92915050565b600080604083850312156128ba576128b9612638565b5b60006128c88582860161288e565b92505060206128d9858286016127d9565b9150509250929050565b6128ec816127b8565b82525050565b600060208201905061290760008301846128e3565b92915050565b60008060006060848603121561292657612925612638565b5b60006129348682870161288e565b93505060206129458682870161288e565b9250506040612956868287016127d9565b9150509250925092565b60006020828403121561297657612975612638565b5b60006129848482850161288e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129c2816127b8565b82525050565b60006129d483836129b9565b60208301905092915050565b6000602082019050919050565b60006129f88261298d565b612a028185612998565b9350612a0d836129a9565b8060005b83811015612a3e578151612a2588826129c8565b9750612a30836129e0565b925050600181019050612a11565b5085935050505092915050565b60006020820190508181036000830152612a6581846129ed565b905092915050565b612a76816126c7565b8114612a8157600080fd5b50565b600081359050612a9381612a6d565b92915050565b60008060408385031215612ab057612aaf612638565b5b6000612abe8582860161288e565b9250506020612acf85828601612a84565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b1b8261274c565b810181811067ffffffffffffffff82111715612b3a57612b39612ae3565b5b80604052505050565b6000612b4d61262e565b9050612b598282612b12565b919050565b600067ffffffffffffffff821115612b7957612b78612ae3565b5b612b828261274c565b9050602081019050919050565b82818337600083830152505050565b6000612bb1612bac84612b5e565b612b43565b905082815260208101848484011115612bcd57612bcc612ade565b5b612bd8848285612b8f565b509392505050565b600082601f830112612bf557612bf4612ad9565b5b8135612c05848260208601612b9e565b91505092915050565b60008060008060808587031215612c2857612c27612638565b5b6000612c368782880161288e565b9450506020612c478782880161288e565b9350506040612c58878288016127d9565b925050606085013567ffffffffffffffff811115612c7957612c7861263d565b5b612c8587828801612be0565b91505092959194509250565b600067ffffffffffffffff82169050919050565b612cae81612c91565b8114612cb957600080fd5b50565b600081359050612ccb81612ca5565b92915050565b600080600060608486031215612cea57612ce9612638565b5b6000612cf8868287016127d9565b9350506020612d098682870161288e565b9250506040612d1a86828701612cbc565b9150509250925092565b60008060408385031215612d3b57612d3a612638565b5b6000612d498582860161288e565b9250506020612d5a8582860161288e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612dab57607f821691505b602082108103612dbe57612dbd612d64565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e20602183612708565b9150612e2b82612dc4565b604082019050919050565b60006020820190508181036000830152612e4f81612e13565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612eb2603e83612708565b9150612ebd82612e56565b604082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612f44602e83612708565b9150612f4f82612ee8565b604082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b600081905092915050565b50565b6000612f95600083612f7a565b9150612fa082612f85565b600082019050919050565b6000612fb682612f88565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613029826127b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305b5761305a612fef565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061309c601883612708565b91506130a782613066565b602082019050919050565b600060208201905081810360008301526130cb8161308f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061312e602983612708565b9150613139826130d2565b604082019050919050565b6000602082019050818103600083015261315d81613121565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b600061319a601483612708565b91506131a582613164565b602082019050919050565b600060208201905081810360008301526131c98161318d565b9050919050565b60006131db826127b8565b91506131e6836127b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561321b5761321a612fef565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b600061325c601483612708565b915061326782613226565b602082019050919050565b6000602082019050818103600083015261328b8161324f565b9050919050565b600061329d826127b8565b91506132a8836127b8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132e1576132e0612fef565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b6000613322601383612708565b915061332d826132ec565b602082019050919050565b6000602082019050818103600083015261335181613315565b9050919050565b7f7075626c6963206d696e74206c696d6974206578636565646564000000000000600082015250565b600061338e601a83612708565b915061339982613358565b602082019050919050565b600060208201905081810360008301526133bd81613381565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613420602f83612708565b915061342b826133c4565b604082019050919050565b6000602082019050818103600083015261344f81613413565b9050919050565b600081905092915050565b600061346c826126fd565b6134768185613456565b9350613486818560208601612719565b80840191505092915050565b60008190508160005260206000209050919050565b600081546134b481612d93565b6134be8186613456565b945060018216600081146134d957600181146134ea5761351d565b60ff1983168652818601935061351d565b6134f385613492565b60005b83811015613515578154818901526001820191506020810190506134f6565b838801955050505b50505092915050565b60006135328286613461565b915061353e8285613461565b915061354a82846134a7565b9150819050949350505050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006135b3603183612708565b91506135be82613557565b604082019050919050565b600060208201905081810360008301526135e2816135a6565b9050919050565b6135f281612c91565b82525050565b600060208201905061360d60008301846135e9565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061366f602683612708565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613701602583612708565b915061370c826136a5565b604082019050919050565b60006020820190508181036000830152613730816136f4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613793602483612708565b915061379e82613737565b604082019050919050565b600060208201905081810360008301526137c281613786565b9050919050565b60006137d4826127b8565b91506137df836127b8565b9250828210156137f2576137f1612fef565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613833602083612708565b915061383e826137fd565b602082019050919050565b6000602082019050818103600083015261386281613826565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061389f601983612708565b91506138aa82613869565b602082019050919050565b600060208201905081810360008301526138ce81613892565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613931603283612708565b915061393c826138d5565b604082019050919050565b6000602082019050818103600083015261396081613924565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139a1826127b8565b91506139ac836127b8565b9250826139bc576139bb613967565b5b828204905092915050565b60006139d2826127b8565b91506139dd836127b8565b9250826139ed576139ec613967565b5b828206905092915050565b6000819050919050565b6000819050919050565b6000613a27613a22613a1d846139f8565b613a02565b612c91565b9050919050565b613a3781613a0c565b82525050565b6000602082019050613a526000830184613a2e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000613a7f82613a58565b613a898185613a63565b9350613a99818560208601612719565b613aa28161274c565b840191505092915050565b6000608082019050613ac2600083018761284d565b613acf602083018661284d565b613adc60408301856128e3565b8181036060830152613aee8184613a74565b905095945050505050565b600081519050613b088161266e565b92915050565b600060208284031215613b2457613b23612638565b5b6000613b3284828501613af9565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613b71602083612708565b9150613b7c82613b3b565b602082019050919050565b60006020820190508181036000830152613ba081613b64565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613bdd601c83612708565b9150613be882613ba7565b602082019050919050565b60006020820190508181036000830152613c0c81613bd0565b905091905056fea2646970667358221220632251cdb570266279344a41ba92ef4caec22c1999a8919bf035f54e61f1e88e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setUser(uint256,address,uint64)": {
        "details": "The zero address indicates there is no user Throws if `tokenId` is not valid NFT",
        "params": {
          "expires": "UNIX timestamp, The new user could use the NFT before expires",
          "user": "The new user of the NFT"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userExpires(uint256)": {
        "details": "The zero value indicates that there is no user",
        "params": {
          "tokenId": "The NFT to get the user expires for"
        },
        "returns": {
          "_0": "The user expires for this NFT"
        }
      },
      "userOf(uint256)": {
        "details": "The zero address indicates that there is no user or the user is expired",
        "params": {
          "tokenId": "The NFT to get the user address for"
        },
        "returns": {
          "_0": "The user address for this NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "UpdateUser(uint256,address,uint64)": {
        "notice": "Emitted when the `user` of an NFT or the `expires` of the `user` is changed The zero address for user indicates that there is no user address"
      }
    },
    "kind": "user",
    "methods": {
      "setUser(uint256,address,uint64)": {
        "notice": "set the user and expires of a NFT"
      },
      "userExpires(uint256)": {
        "notice": "Get the user expires of an NFT"
      },
      "userOf(uint256)": {
        "notice": "Get the user address of an NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2140,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_users",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(UserInfo)2135_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1820,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "supply",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1463_storage"
      },
      {
        "astId": 1823,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "uriPrefix",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 1826,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "uriSuffix",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1829,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "mintCost",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1832,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "maxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1835,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "maxMintAmountPerTx",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1838,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "mintLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1842,
        "contract": "contracts/ERC4907/3Landers.sol:Landers",
        "label": "mintCount",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)2135_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC4907.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2135_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1463_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1462,
            "contract": "contracts/ERC4907/3Landers.sol:Landers",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)2135_storage": {
        "encoding": "inplace",
        "label": "struct ERC4907.UserInfo",
        "members": [
          {
            "astId": 2132,
            "contract": "contracts/ERC4907/3Landers.sol:Landers",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2134,
            "contract": "contracts/ERC4907/3Landers.sol:Landers",
            "label": "expires",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}